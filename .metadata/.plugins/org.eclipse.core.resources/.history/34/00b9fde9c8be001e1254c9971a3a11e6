package gbn.recipebook.shoppinglist.filter;

import java.io.IOException;
import java.util.Collection;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import feign.RequestInterceptor;
import feign.RequestTemplate;
import lombok.extern.slf4j.Slf4j;

@Configuration
@Slf4j
public class FeignRequestInterceptor implements RequestInterceptor {

	@Override
    public void apply(RequestTemplate requestTemplate) {
        ServletRequestAttributes attrs = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        if (attrs != null) {
            HttpServletRequest request = attrs.getRequest();

            // Copy headers from the incoming request
            requestTemplate.headers((Map<String, Collection<String>>) request.getHeaderNames().asIterator());

            // Set Content-Length if the request has a body
            if (request.getMethod().equals("POST") || request.getMethod().equals("PUT")) {
                try {
                    // Assuming you have a way to get the request body content
                    String requestBody = getRequestBody(request);
                    long contentLength = requestBody.getBytes().length;
                    requestTemplate.header("Content-Length", String.valueOf(contentLength));
                } catch (IOException e) {
                    // Handle exception
                    e.printStackTrace();
                }
            }
        }
    }

    // Example method to get the request body content
    private String getRequestBody(HttpServletRequest request) throws IOException {
        // Implement your logic to read the request body
        // This is just an example, you might need to adjust it based on your needs
        // Here, we assume the body is a string
        StringBuilder buffer = new StringBuilder();
        request.getReader().lines().forEach(buffer::append);
        return buffer.toString();
    }
}