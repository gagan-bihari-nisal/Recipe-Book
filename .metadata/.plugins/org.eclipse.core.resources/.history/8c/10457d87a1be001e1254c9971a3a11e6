package gbn.recipebook.shoppinglist.filter;

import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import feign.RequestInterceptor;
import feign.RequestTemplate;
import lombok.extern.slf4j.Slf4j;

@Configuration
@Slf4j
public class FeignRequestInterceptor implements RequestInterceptor {

    private static final Logger logger = LoggerFactory.getLogger(FeignRequestInterceptor.class);

    @Override
    public void apply(RequestTemplate requestTemplate) {
        ServletRequestAttributes attrs = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attrs.getRequest();
        Enumeration<String> headerNames = request.getHeaderNames();
        if (headerNames != null) {
            while (headerNames.hasMoreElements()) {
                String name = headerNames.nextElement();
                String value = request.getHeader(name);
                log.info("name:{},value:{}", name, value);
                if (name != "content-length")
                requestTemplate.header(name, value);
            }
        }
    }

    private void logRequestHeaders(HttpServletRequest request) {
        List<String> headers = Collections.list(request.getHeaderNames()).stream().collect(Collectors.toList());
        logger.error(">>>>>>>>>>Request Headers:");
        for (String header : headers) {
            logger.info("{}: {}", header, request.getHeader(header));
        }
    }

    private void copyRequestHeaders(HttpServletRequest request, RequestTemplate requestTemplate) {
        List<String> headers = Collections.list(request.getHeaderNames()).stream().collect(Collectors.toList());
        for (String header : headers) {
            requestTemplate.header(header, request.getHeader(header));
        }
    }
}